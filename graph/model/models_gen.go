// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

type Note interface {
	IsNote()
	GetID() string
	GetOwners() []Owner
}

type Owner interface {
	IsOwner()
}

type ExternalOwner struct {
	Attributes []*KeyValue `json:"attributes"`
	Contact    string      `json:"contact"`
}

func (ExternalOwner) IsOwner() {}

type InternalOwner struct {
	Attributes []*KeyValue `json:"attributes"`
	IsAdmin    bool        `json:"isAdmin"`
}

func (InternalOwner) IsOwner() {}

type JobNote struct {
	ID     string  `json:"ID"`
	Owners []Owner `json:"owners"`
}

func (JobNote) IsNote()            {}
func (this JobNote) GetID() string { return this.ID }
func (this JobNote) GetOwners() []Owner {
	if this.Owners == nil {
		return nil
	}
	interfaceSlice := make([]Owner, 0, len(this.Owners))
	for _, concrete := range this.Owners {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

type KeyValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type Query struct {
}

type Subscription struct {
}

type TodoState struct {
	Notes []Note `json:"notes"`
}
