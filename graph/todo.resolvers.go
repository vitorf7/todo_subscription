package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"log/slog"
	"time"

	"github.com/vitorf7/todo_subscription/graph/generated"
	"github.com/vitorf7/todo_subscription/graph/model"
)

// TodoState is the resolver for the todoState field.
func (r *subscriptionResolver) TodoState(ctx context.Context) (<-chan *model.TodoState, error) {
	ch := make(chan *model.TodoState)

	go func() {
		<-ctx.Done()
		if ctx.Err() != nil {
			r.Logger.Info("Context done")
		}
	}()

	go func() {
		defer close(ch)

		for range time.NewTicker(15 * time.Second).C {
			msg := &model.TodoState{
				Notes: []model.Note{
					&model.JobNote{
						ID: time.Now().String(),
						Owners: []model.Owner{
							&model.InternalOwner{
								Attributes: []*model.KeyValue{
									{
										Key:   "foo",
										Value: "bar",
									},
								},
								IsAdmin: true,
							},
						},
					},
				},
			}

			select {
			case <-ctx.Done():
				r.Logger.Info("Context done")
				if ctx.Err() != nil {
					r.Logger.Error("Context done with error", slog.String("error", ctx.Err().Error()))
				}
				return
			case ch <- msg:
				r.Logger.Info("New message sent")
			case <-time.After(60 * time.Second):
				r.Logger.Info("Timed out")
				return
			}
		}
	}()

	return ch, nil
}

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
